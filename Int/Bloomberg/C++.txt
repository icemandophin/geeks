Virtual functions
a. What is the usage of virtual functions?
virtual function: a member function which is declared within base class and
re-defined (Overriden) by derived class.
If we need to override a certain behavior in derived class through a pointer to the base class
during run-time, we need virtual function.

b. When should we define virtual destructor?
When we have a virtual function in a class, we should always add a virtual destructor
When we delete a derived class object using a pointer to a base class, if base class
has non-virtual destructor it can lead to undefined behavior - like destroy base obj.

c. What is Vtable?
It is the way C++ implements polymorphism. For each concrete implementation of a class,
there is a table of function pointers to all the virtual methods. A pointer to virtual table
exists as a data member in all the objects. When one calls a virtual function, we
lookup the objects Vtable and call the appropriate derived calls function.

d. When a function is defined virtual in the base class, does it have to
be virtual in the derived class as well?
No - it is NOT necessary; override method in derived class is virtual anyway

const keyword - specify the object cannot be modified
a. What does “const” key word mean in front of a function declaration?
constant method means it cannot modify any member variable of the class, unless
it is declared mutable.
If object is constant, only its const method can be called

b. How can we change member variables in a function which is declared as
constant?
Create casted version of “This” pointer:
class A() {
    const int var = 10;
    A* ptr =  const_cast<A*>(this);
    ptr->x= 10;
}

Implement an API to manage connections and sessions with the
following requirements
a. Connections from one client should be always served in one session
b. New connection should be served by the session with minimum number of
connections

What is exception handling and how is it handled in C++?
handle errors during program execution
try {} catch (e) {}

What happens in C++, if constructor fails?
throw exception

hat happens in C++, if constructor fails?
- How can you call base class constructor from derived class
by default derived class always calls the constructors of its base class
if needed to call derived class constructor, specify which base class constructor to call:
class Rectangle : public Shape { Rectangle(int h, int w) : Shape(h, w) {...} }

- what is virtual function?
ember function which is declared within base class and re-defined in derived class

- what is pure virtual function?
virtual function that required to be implemented in derived class
virtual void f() = 0;

- what is difference between copy constructor and assignment operator
copy constructor is used to initialize a previously uninitialized object from
some other object's data
assignment operator is used to replace the data of a previously initialized object
with some other object's data

- what is polymorphism?
the ability to have many forms

- what is name mangling?
c++ compiler add argument information to function names to distinguish overloading
functions

- can we use exception in destructor? what would be the behavior
Dangerous - if another exception is already propagating the application will terminate

- difference between c & c++?
OO paradigm, Standard Library, RAII(with smart pointer), name scope

- difference between new and malloc?
new operator allocates memory then calls the constructor
delete calls the destructor then deallocates the memory
malloc & free just allocate and release raw memory

- difference between vector and array?
array: fixed size
vector: size can change

- what is the internal implementation of vector and what is the data structure vector uses?
templated class which wraps a native array, use allocator to get new chunk of space

- how does map work in C++? what is the internal data structure? what is the time complexity?
implemented with red-black tree; O(log N)

JSON vs XML:
JSON
Pro:
Simple syntax, which results in less "markup" overhead compared to XML.
Easy to use with JavaScript as the markup is a subset of JS object literal notation and has the same basic data types as JavaScript.
JSON Schema for description and datatype and structure validation
JsonPath for extracting information in deeply nested structures
Con:
Simple syntax, only a handful of different data types are supported.

XML
Pro:
Generalized markup; it is possible to create "dialects" for any kind of purpose
XML Schema for datatype, structure validation. Makes it also possible to create new datatypes
XSLT for transformation into different output formats
XPath/XQuery for extracting information in deeply nested structures
built in support for namespaces
Con:
Relatively wordy compared to JSON (results in more data for the same amount of information).

Implement a shared pointer for use in multiple threads:
shared_ptr<> is a mechanism to ensure that multiple object owners ensure an object is destructed,
not a mechanism to ensure multiple threads can access an object correctly

why are c-style casts bad in c++ sometimes?
C-style casts may let you do conversions you didn't intend

differences between static_cast, const_cast, dynamic_cast, reinterpret_cast?
static_cast implicit conversions between types (such as int to float, or pointer to void*)
const_cast can be used to remove or add const to a variable
dynamic_cast is almost exclusively used for handling polymorphism.
reinterpret_cast is the most dangerous cast, it turns one type directly into another

static keyword:
Static variables in a class: initialized only once, not shared by the objects,
keep its value during program lifetime
Static functions in a class: not depend on object of class (invoke with class.method),
access only the static data members or other static member functions

How do you avoid dead locking?
Mutual exclusion condition: a resource that cannot be used by more than one process at a time
Hold and wait condition: processes already holding resources may request new resources
No preemption condition: No resource can be forcibly removed from a process holding it,
resources can be released only by the explicit action of the process
Circular wait condition: two or more processes form a circular chain where each
process waits for a resource that the next process in the chain holds
Resolve:
make sure that all locks are always taken in the same order by any thread
eg: always lock A->B->C
put a timeout on lock attempts
Every time a thread takes a lock it is noted in a data structure (map, graph etc.)
When a thread requests a lock but the request is denied, the thread can traverse
the lock graph to check for deadlocks

difference between multi-processing and multi-threading?
Multiprocessing adds CPUs to increase computing power.
Multithreading creates multiple threads of a single process to increase computing power.
Creation of a process is more expensive than creation of a thread

Given a huge list of objects with very high frequency lookup and update and the
order of objects need to be maintained, what data structure should be used and why
LinkedHashMap

difference between interface and abstract class?
An interface is an empty shell. There are only the signatures of the methods,
which implies that the methods do not have a body. It's just a pattern.
Abstract class can have explicit members defined in it

How C++ call C functions?
just declare the C function extern "C" (in your C++ code) and call it

How C++ compiler deal with function overload?
It's all done at compile time. The C++ compiler actually modifies the function names:
int foo(int a, float b, char c)  -> func_foo_int_float_char()

Given a vector of strings which contains duplicate words except for one, find the unique one?
hashset or sorting

Virtual Inheritance?
ensures only one copy of a base class's member variables are inherited by grandchild derived classes.

1. How would you choose a thread from a list of threads already
running and how would you pass a parameter to it?
std::thread(func1,a,b,c,d);

2. How would you guarantee deleting a pointer you created in a C++ function?
Correct way:
myPointer = new int;
delete myPointer; //freed memory
myPointer = NULL; //pointed dangling ptr to NULL
Better way:
use smart pointer

3. What methods will you write in implementing a smart pointer.
What will the constructor do?

4. How will you calculate the frequency of a set of fruits say
Apples, Oranges, Bananas and print them in sorted order of frequency.
E.g. Oranges 5, Apples 9, Bananas 12, etc.
HashMap + Priority Queue

6. In Java, there's a "finally" clause that can be used with a try,
catch block that is used to handle last minute cleanup.
Why isn't there anything like this in C/C++?
The reason that C++ does not have finally is because it is not needed in C++.
finally is used to execute some cleanup code, In C++, this cleanup code should be
in the destructor of the relevant class and the destructor will always be called.
he idiom of using the destructor for your cleanup is called RAII.
